generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  name       String
  email      String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  password   String
  role       String     @default("USER")
  categories Category[]
  notes      Note[]
  tags       Tag[]
  tasks      Task[]
}

model Note {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  content   String?
  title     String
  pinned    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#6200ee")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#03DAC5")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]   @relation("TaskToTag")
}

model Task {
  id          String    @id @default(uuid())
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  description String?
  dueDate     DateTime?
  title       String
  priority    String    @default("m√©dia")
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]     @relation("TaskToTag")
}
